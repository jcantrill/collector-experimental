apiVersion: v1
kind: ConfigMap
metadata:
  name: collector
  namespace: openshift-logging
data:
  vector.toml: |+
    [sources.kube]
      type = "kubernetes_logs"
      auto_partial_merge = true
    [transforms.normalize]
     type = "remap"
     inputs = ["kube"]
     source = '''
       level = "unknown"
       if match(.message,r'(Warning|WARN|W[0-9]+|level=warn|Value:warn|"level":"warn")'){
         level = "warn"
       } else if match(.message, r'Info|INFO|I[0-9]+|level=info|Value:info|"level":"info"'){
         level = "info"
       } else if match(.message, r'Error|ERROR|E[0-9]+|level=error|Value:error|"level":"error"'){
         level = "error"
       } else if match(.message, r'Debug|DEBUG|D[0-9]+|level=debug|Value:debug|"level":"debug"'){
         level = "debug"
       }
       .level = level
       
       .pipeline_metadata.collector.name = "vector"
       .pipeline_metadata.collector.version = "someversion"
       ip4, err = get_env_var("NODE_IPV4")
       .pipeline_metadata.collector.ipaddr4 = ip4
       received, err = format_timestamp(now(),"%+")
       .pipeline_metadata.collector.received_at = received
       .pipeline_metadata.collector.error = err
     '''
    [transforms.ocp_sys]
      type = "route" 
      inputs = ["normalize"]
      route.infra = 'starts_with!(.kubernetes.pod_namespace,"kube") || starts_with!(.kubernetes.pod_namespace,"openshift") || .kubernetes.pod_namespace == "default"'
      route.app = '!(starts_with!(.kubernetes.pod_namespace,"kube") && starts_with!(.kubernetes.pod_namespace,"openshift") && .kubernetes.pod_namespace == "default")'
      route.app_special = '.kubernetes.pod_namespace == "my-devel"'
    
    [sinks.special_output]
      type="console"
      inputs = ["ocp_sys.infra","ocp_sys.app_special"]
      encoding.codec = "json"
    [sinks.leftover]
      type="console"
      inputs = ["ocp_sys.infra","ocp_sys.app"]
      encoding.codec = "json"
